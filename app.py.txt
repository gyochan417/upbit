import streamlit as st
import requests
import pandas as pd
import numpy as np
import plotly.graph_objs as go

st.set_page_config(page_title="업비트 코인 매매신호", layout="wide")

@st.cache(ttl=60)
def get_ohlcv(ticker="KRW-BTC", interval="minute60", count=200):
    url = f"https://api.upbit.com/v1/candles/{interval}?market={ticker}&count={count}"
    headers = {"Accept": "application/json"}
    resp = requests.get(url, headers=headers)
    data = resp.json()
    df = pd.DataFrame(data)
    df = df.sort_values("candle_date_time_kst")
    df.index = pd.to_datetime(df["candle_date_time_kst"])
    return df

def calc_indicators(df):
    df["MA5"] = df["trade_price"].rolling(5).mean()
    df["MA20"] = df["trade_price"].rolling(20).mean()
    df["STD20"] = df["trade_price"].rolling(20).std()
    df["UpperBB"] = df["MA20"] + (df["STD20"] * 2)
    df["LowerBB"] = df["MA20"] - (df["STD20"] * 2)
    delta = df["trade_price"].diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(14).mean()
    avg_loss = loss.rolling(14).mean()
    rs = avg_gain / avg_loss
    df["RSI14"] = 100 - (100 / (1 + rs))
    return df

def signal_generator(df):
    signals = []
    for i in range(len(df)):
        if i == 0:
            signals.append("")
            continue
        if (df["MA5"].iloc[i] > df["MA20"].iloc[i]) and (df["MA5"].iloc[i-1] <= df["MA20"].iloc[i-1]) and (df["RSI14"].iloc[i] < 70):
            signals.append("매수 BUY")
        elif (df["MA5"].iloc[i] < df["MA20"].iloc[i]) and (df["MA5"].iloc[i-1] >= df["MA20"].iloc[i-1]) and (df["RSI14"].iloc[i] > 30):
            signals.append("매도 SELL")
        else:
            signals.append("")
    df["Signal"] = signals
    return df

st.title("🪙 업비트 코인 자동 매매 신호 생성기")

coin = st.selectbox("코인 선택", ["KRW-BTC", "KRW-ETH", "KRW-XRP", "KRW-DOGE", "KRW-ADA"])
interval = st.selectbox("차트 간격", ["minute1", "minute3", "minute5", "minute15", "minute30", "minute60", "minute240", "day"])

df = get_ohlcv(coin, interval)
df = calc_indicators(df)
df = signal_generator(df)

latest_signal = df["Signal"].iloc[-1]
st.markdown(f"## 최신 신호: **{latest_signal if latest_signal else '신호 없음'}**")

fig = go.Figure()

fig.add_trace(go.Candlestick(
    x=df.index,
    open=df["opening_price"],
    high=df["high_price"],
    low=df["low_price"],
    close=df["trade_price"],
    name="캔들차트"
))

fig.add_trace(go.Scatter(x=df.index, y=df["MA5"], line=dict(color='blue', width=1), name='MA5'))
fig.add_trace(go.Scatter(x=df.index, y=df["MA20"], line=dict(color='orange', width=1), name='MA20'))
fig.add_trace(go.Scatter(x=df.index, y=df["UpperBB"], line=dict(color='green', width=1, dash='dash'), name='Upper Bollinger Band'))
fig.add_trace(go.Scatter(x=df.index, y=df["LowerBB"], line=dict(color='green', width=1, dash='dash'), name='Lower Bollinger Band'))

st.plotly_chart(fig, use_container_width=True)

st.write("### 신호가 뜬 시간 및 신호 내역")
signals_df = df[df["Signal"] != ""].copy()
signals_df = signals_df[["trade_price", "Signal"]]
signals_df.index.name = "시간"
st.dataframe(signals_df.tail(10))
